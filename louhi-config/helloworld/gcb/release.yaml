# substitutions:
#   # _SRC_DIR and _REV are populated automatically by Louhi (from the
#   # "artifacts:" YAML key in flow.yaml).
#   _SRC_DIR: "%OPERATION.CHECKOUT_DIR"
#   _REV: "%OPERATION.REVISION"

timeout: '21600s'

# tags:
# - 'helloworld'
# - 'release'

steps:
# # Compile binary and build Docker image. The build script that comes with
# # helloworld first compiles the Go binary and then containerizes it inside a
# # Docker image.
# - name: k8s.gcr.io/addon-builder
#   id: build
#   entrypoint: 'bash'
#   dir: '${_SRC_DIR}'
#   args:
#   - '-c'
#   - |
#     set -ex
#     echo building $_REV
#     PUSH_REGISTRY=gcr.io/$PROJECT_ID ./build.sh

# # Test the image. Ideally this would invoke some unit tests.
# - name: k8s.gcr.io/addon-builder
#   id: test
#   entrypoint: 'bash'
#   dir: '${_SRC_DIR}'
#   args:
#   - '-c'
#   - |
#     set -ex
#     ./test.sh

# - name: gcr.io/cloud-marketplace/google/rbe-ubuntu16-04@sha256:9bd8ba020af33edb5f11eff0af2f63b3bcb168cd6566d7b27c6685e717787928
#   id: lsStep
#   # entrypoint: '/bin/bash'
#   args: ['echo', 'hello world!!!']

# - name: 'gcr.io/cloud-builders/bazel@sha256:1e8195b0f8a0f969f6e82cabcb57459bf141fe5acf1735a05d0a94701c8483d1'
#   id: 'bazelVersionCheck'
#   entrypoint: 'bash'
#   args: ['bazel', 'version']









  # Step: print the bazel version for confirmation
  # - name: 'gcr.io/cloud-marketplace/google/bazel@sha256:5f5c71668e8c03267f392fb7f2bde31bab4f828990306c8dc2eeac9ecd220e3e'
  # - name: 'gcr.io/cloud-builders/bazel@sha256:1e8195b0f8a0f969f6e82cabcb57459bf141fe5acf1735a05d0a94701c8483d1'
    # entrypoint: 'bash'
  - name: 'gcr.io/asci-toolchain/nosla-ubuntu16_04-bazel-docker-gcloud:0.17.1'
    args: ['version']
    id: 'version'
    waitFor:
    - "-" # wait for nothing - start immediately

  - name: 'gcr.io/cloud-marketplace/google/bazel@sha256:5f5c71668e8c03267f392fb7f2bde31bab4f828990306c8dc2eeac9ecd220e3e'
  # - name: 'gcr.io/cloud-builders/bazel@sha256:1e8195b0f8a0f969f6e82cabcb57459bf141fe5acf1735a05d0a94701c8483d1'  
    # dir: '/home'
    entrypoint: 'git'
    args: ['clone', 'https://github.com/alex1545/bazel-container']
    id: 'clone-repo'
    waitFor:
    - 'version'


  - name: 'gcr.io/cloud-marketplace/google/bazel@sha256:5f5c71668e8c03267f392fb7f2bde31bab4f828990306c8dc2eeac9ecd220e3e'
  # - name: 'gcr.io/cloud-builders/bazel@sha256:1e8195b0f8a0f969f6e82cabcb57459bf141fe5acf1735a05d0a94701c8483d1'
    entrypoint: 'ls'
    args: ['bazel-container']
    id: 'lsStep'
    waitFor:
      - 'clone-repo'




  # - name: 'gcr.io/cloud-builders/bazel@sha256:1e8195b0f8a0f969f6e82cabcb57459bf141fe5acf1735a05d0a94701c8483d1'
  #   entrypoint: 'cd'
  #   args: ['/workspace/bazel-container']
  #   id: 'cd-into-repo'
  #   waitFor:
  #     - 'lsStep'



  # # Step: build the fully loaded container using rules_docker
  # - name: 'gcr.io/cloud-marketplace/google/bazel@sha256:5f5c71668e8c03267f392fb7f2bde31bab4f828990306c8dc2eeac9ecd220e3e'
  # # - name: 'gcr.io/cloud-builders/bazel@sha256:1e8195b0f8a0f969f6e82cabcb57459bf141fe5acf1735a05d0a94701c8483d1'
  #   dir: '/workspace/bazel-container'
  # # - name: 'gcr.io/asci-toolchain/nosla-ubuntu16_04-bazel-docker-gcloud:0.17.1'
  #   # entrypoint: 'pwd'
  #   # Set Bazel output_base to /workspace, which is a mounted directory on Google Cloud Builder.
  #   # This is to make sure Bazel generated files can be accessed by multiple containers.
  #   args: [
  #     # '--output_base=/workspace',
  #     'run',
  #     '--verbose_failures',
  #     '--spawn_strategy=standalone',
  #     '--genrule_strategy=standalone',
  #     '//container/ubuntu16_04/builders/bazel:bazel_0.17.1'
  #   ]
  #   id: 'container-build'
  #   waitFor:
  #   - 'lsStep'


